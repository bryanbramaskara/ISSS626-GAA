---
title: "In-class Exercise 3B: Preparation for Take-home Exercise 1"
format: html
author: "Bryan Bramaskara"
date: "September 13, 2025"
date-modified: "last-modified"
execute: 
  eval: false
  echo: true
  warning: false
  freeze: true
---

# In-class Exercise 3B: Preparation for Take-home Exercise 1

## Installing Required Packages

```{r}
pacman::p_load(tidyverse, sf, tmap, httr)
```

## Loading and combining ACRA Datas by using wildcards

```{r}
folder_path <- "data/aspatial/acra"
file_list <- list.files(path = folder_path,
                        pattern = "^ACRA*.*\\.csv$",
                        full.names = TRUE)

acra_data <- file_list %>% 
  map_dfr(read_csv)
```

## Saving ACRA Data into RDS

```{r}
write_rds(acra_data,
          "data/rds/acra_data.rds")
```

## Tidying ACRA Data

```{r}
biz_56111 <- acra_data %>% 
  select(1:24) %>% 
  filter(primary_ssic_code == 56111) %>% 
  rename(date = registration_incorporation_date) %>% 
  mutate(date = as.Date(date),
         YEAR = year(date),
         MONTH_NUM = month(date),
         MONTH_ABBR = month(date,
                            label = TRUE,
                            abbr = TRUE)) %>% 
  mutate(
    postal_code = str_pad(postal_code,
    width = 6, side = "left", pad = "0")) %>% #width = 6 means that it will be in 6 digits format
            filter(YEAR == 2025)
  
```

## Geocoding

```{r}
postcodes <- unique(biz_56111$postal_code)

url <- "https://onemap.gov.sg/api/common/elastic/search"

found <- data.frame()
not_found <- data.frame(postcode = character())

for (pc in postcodes){
  query <- list(
    searchVal = pc,
    returnGeom = "Y",
    getAddrDetails = "Y",
    pageNum = "1"
  )
  
  res <- GET(url, query = query)
  json <- content(res)
  
  if(json$found != 0){
    df <- as.data.frame(json$results, stringsAsFactors = FALSE)
    df$input_postcode <- pc
    found <- bind_rows(found, df)
  } else {
    not_found <- bind_rows(not_found, data.frame(postcode = pc))
  }
}
```

## Tidying the geocoded Data

```{r}
biz_56111 = biz_56111 %>% 
  left_join(found,
            by = c('postal_code' = 'POSTAL'))
```

## Converting into SF data frame

```{r}
biz_56111 <- st_as_sf(biz_56111, coords = c("X", "Y"), crs=3414)
```
